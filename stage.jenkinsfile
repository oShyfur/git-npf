pipeline {
    agent any
    environment {
        REGISTRY="docker-hub.land.gov.bd"
        dockerRegistryCredential='docker-hub.land.gov.bd'
        //REGISTRY="docker-reg.portal.gov.bd"
        //dockerRegistryCredential='docker-reg.portal.gov.bd'        
        dockerImage = ''
        DOCKER_REGISTRY_URL="https://$REGISTRY"
        CONFIG_MAP="np-backend-configmap"
	    SECRET_REF="np-backend-secret"
        DEPLOYMENT_ENV="stage"
        IMAGE_CREATED_BY="jenkins"
        PROJECT_NAME="np-backend"
 
        GIT_TAG=sh(returnStdout: true, script: '''        
            echo $(git describe --tags)
        ''').trim()


        PROJECT_LOCATION="$JENKINS_DATA_LOCATION/workspace/$JOB_NAME"
        IMAGE_VERSION="$BUILD_NUMBER-$IMAGE_CREATED_BY-$GIT_TAG"
        DOCKER_TAG="$REGISTRY/$PROJECT_NAME:$IMAGE_VERSION"
  //    DOCKER_TAG="docker-reg.portal.gov.bd/npf_backennd:1.60"
        DEPLOYMENT_DIRECTORY="./deployment/$DEPLOYMENT_ENV"

        //k8s cluster specific configuration
        K8S_SERVICE_NAME="np-backend"
        K8S_CHANGE_CAUSE="$IMAGE_VERSION"

        DEPLOYMENT_TIMEOUT="120s"
		
	    }

    stages {

        stage('Init') {
            steps {
                sh '''
                COMMIT_ID=$(git log -1|head -1|awk -F ' ' ' {print $NF}')
                echo "........result of commit .... $COMMIT_ID"
                '''
            }
        }

     
     stage('Building Docker image') { 
            steps { 
                script { 
                    dockerImage = docker.build("$DOCKER_TAG", "-f ./backend.Dockerfile .")
                }
                sh '''
                docker images|grep $PROJECT_NAME
                '''
            } 
        }

      stage('Push docker image') {
            steps{
                script {
                    docker.withRegistry( "$DOCKER_REGISTRY_URL", dockerRegistryCredential ) {
                        dockerImage.push()
                        sh "docker images|grep $PROJECT_NAME"
                    }
                    
                }
            }
        }
     


     stage('Deleted image After upload to Registry') {
            steps {
                echo "Cleaning local docker registry $DOCKER_TAG image"
                sh 'docker rmi $DOCKER_TAG'
            }
        }

 
    stage('K8S Deployment-mymensingh') {
            steps {
                sh '''
                envsubst < $DEPLOYMENT_DIRECTORY/mymensingh/deploy.yaml | xargs -I{} echo {}
                #envsubst < $DEPLOYMENT_DIRECTORY/mymensingh/deploy.yaml | kubectl apply -f -
                #kubectl rollout status -n stage-mymensingh deployment np-backend --timeout $DEPLOYMENT_TIMEOUT
                
                '''
            }
        }
    stage('Deploy service mymensingh') {
            steps {
                sh '''
                envsubst < $DEPLOYMENT_DIRECTORY/mymensingh/service.yaml | xargs -I{} echo {}
                #envsubst < $DEPLOYMENT_DIRECTORY/mymensingh/service.yaml | kubectl apply -f -
                '''
            }
        }
    stage('K8S Deployment dhaka') {
            steps {
                sh '''
                envsubst < $DEPLOYMENT_DIRECTORY/dhaka/deploy.yaml | xargs -I{} echo {}
                #envsubst < $DEPLOYMENT_DIRECTORY/dhaka/deploy.yaml | kubectl apply -f -
                #kubectl rollout status -n stage-dhaka deployment np-backend --timeout $DEPLOYMENT_TIMEOUT
                
                '''
            }
        }
    stage('Deploy service dhaka') {
            steps {
                sh '''
                envsubst < $DEPLOYMENT_DIRECTORY/dhaka/service.yaml | xargs -I{} echo {}
                #envsubst < $DEPLOYMENT_DIRECTORY/dhaka/service.yaml | kubectl apply -f -
                '''
            }
        }
    stage('K8S Deployment sylhet') {
            steps {
                sh '''
                #envsubst < $DEPLOYMENT_DIRECTORY/sylhet/deploy.yaml | xargs -I{} echo {}
                #envsubst < $DEPLOYMENT_DIRECTORY/sylhet/deploy.yaml | kubectl apply -f -
                #kubectl rollout status -n stage-national-portal deployment np-backend --timeout $DEPLOYMENT_TIMEOUT
                
                '''
            }
        }
    stage('Deploy service sylhet') {
            steps {
                sh '''
                #envsubst < $DEPLOYMENT_DIRECTORY/sylhet/service.yaml | xargs -I{} echo {}
                #envsubst < $DEPLOYMENT_DIRECTORY/sylhet/service.yaml | kubectl apply -f -
                '''
            }
        } 


//.............. 


    }
}
